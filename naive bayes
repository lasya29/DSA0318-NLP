import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Sample dataset: Emails with labels as spam (1) or ham (0)
data = {
    'text': [
        'Win a brand new car by clicking this link', 
        'Urgent! Update your bank account information',
        'Meeting tomorrow at 10am',
        'You have won $1000! Claim now',
        'Letâ€™s have lunch tomorrow',
        'Please review the attached document',
        'Get your free coupon now',
        'Important notice about your account',
        'Congratulations, you won a lottery',
        'Your flight is confirmed for tomorrow'
    ],
    'label': [1, 1, 0, 1, 0, 0, 1, 1, 1, 0]
}

# Convert to a DataFrame
df = pd.DataFrame(data)

# Splitting the data into features (X) and labels (y)
X = df['text']
y = df['label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Convert the text data into a bag-of-words representation
vectorizer = CountVectorizer()
X_train_transformed = vectorizer.fit_transform(X_train)
X_test_transformed = vectorizer.transform(X_test)

# Create and train the Naive Bayes model
model = MultinomialNB()
model.fit(X_train_transformed, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test_transformed)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Classification report for more detailed evaluation
print('\nClassification Report:')
print(classification_report(y_test, y_pred, target_names=['Ham', 'Spam']))

# Test with new examples
new_emails = [
    'Win a trip to the Bahamas, click here now!',
    'Your meeting is confirmed at 2 PM tomorrow.',
    'Congratulations, you have been selected for a prize!',
    'Reminder: Your appointment is scheduled for tomorrow.',
]

# Transform the new emails using the same vectorizer
new_emails_transformed = vectorizer.transform(new_emails)

# Predict using the model
predictions = model.predict(new_emails_transformed)

# Print the predictions
for email, label in zip(new_emails, predictions):
    print(f"Email: '{email}' => {'Spam' if label == 1 else 'Ham'}")
